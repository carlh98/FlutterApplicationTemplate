parameters:
- name: pathToSrc
  type: string
  default: ''
- name: projectName
  type: string
  default: '$(ProjectName)'

steps:
- template: templates/gitversion.yml
- template: templates/build-number.yml
- template: templates/flutter-install.yml

#-if false
- download: current
  condition: eq('GeneratedApp', '${{ parameters.projectName }}')
  artifact: GeneratedApp
#-endif

- task: FlutterCommand@0
  displayName: "Run Flutter Clean"
  inputs:
    projectDirectory: '${{ parameters.pathToSrc }}/app'
    arguments: 'clean'

- task: PowerShell@2
  displayName: 'Execute Build Runner'
  inputs:
    targetType: 'inline'
    script: |
      Set-Location '${{ parameters.pathToSrc }}/app'
      $(DartToolPath)/dart run build_runner build --delete-conflicting-outputs

- task: FlutterBuild@0
  displayName: 'Build solution in $(ApplicationConfiguration)'
  inputs:
    target: windows
    buildName: '$(MajorMinorPatch)'
    buildNumber: '$(BuildNumber)'
    projectDirectory: '${{ parameters.pathToSrc }}/app'
    verboseMode: true

- publish: $(Build.ArtifactStagingDirectory)
  displayName: 'Publish artifact $(ApplicationConfiguration)'
  condition: always()
  artifact: $(ArtifactName)

#-if false
- task: DeleteFiles@1
  displayName: "Remove downloaded artifacts (GeneratedApp folder)"
  condition: always()
  inputs:
    SourceFolder: $(Pipeline.Workspace)/GeneratedApp
    RemoveSourceFolder: true
    Contents: '**'
#-endif

- task: PostBuildCleanup@3
  displayName: 'Post-Build Cleanup: Cleanup files to keep build server clean!'
  condition: always()
