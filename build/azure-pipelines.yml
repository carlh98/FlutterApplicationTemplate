# Use this to schedule a build at defined days and times.
# schedules:
# - cron: "30 08 * * Mon-Fri" # Format is "Minutes Hours DayOfMonth Month DayOfWeek" in UTC (that's why 08 is 3h EST)
#   displayName: 'Nightly weekdays build - 3:30 EST'
#   always: false # If nothing changed, don't start a new run.
#   branches:
#     include:
#       - main
#       - develop
#       - release/*
#       - feature/*

pr:
 branches:
   include:
   - main
   - release/*
   - feature/*

trigger:
  branches:
    include:
      - main

variables:
- template: variables.yml

stages:
#-if false
- stage: CopyTool_GeneratedApp
  jobs:
  - template: stage-copytool.yaml

- stage: Build_Staging_GeneratedApp
  dependsOn: CopyTool_GeneratedApp
  jobs:
  - template: stage-build.yml
    parameters:
      pathToSrc: '$(Pipeline.Workspace)/GeneratedApp/src'
      projectName: 'GeneratedApp'
      applicationEnvironment: Generated_Staging
      androidKeyStoreFile: $(InternalKeystore)
      androidKeyPropertiesFile: $(InternalKeyProperties)
      androidVariableGroup: 'FlutterApplicationTemplate.Distribution.Internal.Android'
      iosProvisioningProfileFile: $(InternalProvisioningProfile)
      iosExportOptionsFile: $(InternalExportOptions)
      iosCertificateFile: $(InternalCertificate)
      iosVariableGroup: 'FlutterApplicationTemplate.Distribution.Internal.iOS'
#-endif

- stage: Build_Staging
#-if false
  dependsOn: [] # This removes the implicit dependency on previous stage and causes this to run in parallel.
#-endif
  jobs:
  - template: stage-build.yml
    parameters:
      applicationEnvironment: Staging
      androidKeyStoreFile: $(InternalKeystore)
      androidKeyPropertiesFile: $(InternalKeyProperties)
      androidVariableGroup: 'FlutterApplicationTemplate.Distribution.Internal.Android'
      iosProvisioningProfileFile: $(InternalProvisioningProfile)
      iosExportOptionsFile: $(InternalExportOptions)
      iosCertificateFile: $(InternalCertificate)
      iosVariableGroup: 'FlutterApplicationTemplate.Distribution.Internal.iOS'
      BannerVersionNameText: 'STAGING'

- stage: AppCenter_TestFlight_Staging
  condition: and(succeeded(), eq(variables['IsLightBuild'], 'false'))
  dependsOn: Build_Staging
  jobs:
  - template: stage-release-appcenter.yml
    parameters:
      applicationEnvironment: Staging
      deploymentEnvironment: AppCenter
      appCenterAndroidSlug: $(AppCenterAndroidSlug)
      androidKeyStoreFile: $(InternalKeystore)
      androidVariableGroup: 'ApplicationTemplate.Distribution.Internal.Android'
      appCenterServiceConnectionName: $(AppCenterServiceConnection)
      appCenterDistributionGroup: $(AppCenterDistributionGroup)

  - template: stage-release-appstore.yml
    parameters:
      applicationEnvironment: Staging
      deploymentEnvironment: TestFlight

- stage: Build_Production
  dependsOn: Build_Staging
  condition: and(succeeded(), eq(variables['IsLightBuild'], 'false'))
  jobs:
  - template: stage-build.yml
    parameters:
      applicationEnvironment: Production
      androidKeyStoreFile: $(GooglePlayKeystore)
      androidKeyPropertiesFile: $(GooglePlayKeyProperties)
      androidVariableGroup: 'FlutterApplicationTemplate.Distribution.GooglePlay'
      iosProvisioningProfileFile: $(AppStoreProvisioningProfile)
      iosExportOptionsFile: $(AppStoreExportOptions)
      iosCertificateFile: $(AppStoreCertificate)
      iosVariableGroup: 'FlutterApplicationTemplate.Distribution.AppStore'

- stage: AppCenter_Production
  condition: and(succeeded(), eq(variables['IsLightBuild'], 'false'))
  dependsOn: Build_Production
  jobs:
  - template: stage-release-appcenter.yml
    parameters:
      applicationEnvironment: Production
      deploymentEnvironment: 'AppCenter Prod'
      appCenterAndroidSlug: $(AppCenterAndroidSlug_Production)
      androidKeyStoreFile: $(GooglePlayKeystore)
      androidVariableGroup: 'ApplicationTemplate.Distribution.GooglePlay'
      appCenterServiceConnectionName: $(AppCenterServiceConnection)
      appCenterDistributionGroup: $(AppCenterDistributionGroup)

- stage: AppStore
  condition: and(succeeded(), eq(variables['IsLightBuild'], 'false'))
  dependsOn: Build_Production
  jobs:
  - template: stage-release-appstore.yml
    parameters:
      applicationEnvironment: Production
      deploymentEnvironment: AppStore

- stage: GooglePlay
  condition: and(succeeded(), eq(variables['IsLightBuild'], 'false'))
  dependsOn: Build_Production
  jobs:
  - template: stage-release-googleplay.yml
    parameters:
      applicationEnvironment: Production
      deploymentEnvironment: GooglePlay
